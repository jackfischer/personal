scriptencoding utf-8
set encoding=utf-8
if $SHELL =~ 'bin/fish'
    set shell=/usr/local/bin/zsh
endif

"Basics
set nocompatible
set ttyfast
let python_highlight_all=1 "NEW
syntax on "syntax highlighting automatically
set cursorline "highlight current line of cursor
"hi CursorLine ctermbg=darkgray "8 = dark gray, 15 = white
"hi Cursor ctermbg=15 ctermfg=8
set colorcolumn=80 "highlight the column to break by
highlight ColorColumn ctermbg=black "color
set exrc "use directory specific vimrc if there
set notimeout "waiting for keys
set ttimeout "waiting for keys
set timeoutlen=50 "wait time for combos
set virtualedit=block "allow cursor to go anywhere in visual block mode
set smartindent "smart auto indenting
set tabstop=4 "tabs = 4 spaces
set scrolloff=10 "keep 10 lines visible at top and bottom when scrolling
set shiftwidth=4 "spaces for each level of autoindent
set expandtab "use the above #spaces to insert a tab
set ttyfast "assume terminal is fast, improves visuals
set nocompatible "disable ancient compatibility, better overall
set noswapfile "chris advice. no annoying swapfile on disk; pure in memory
set nobackup "no backup when overwriting a file
filetype off "required for vundle
set wrap "wrap long lines
set undofile "save your undos on disk and always have them!
set undodir=$HOME/.vim/undo "will be saved here
set laststatus=2 "always have status bar
set ai "copy indent from current line when starting a new line
set number "line numbers
set hlsearch "highlight search matches previous search pattern
set ignorecase "ignore case in searches
set smartcase "override ignore case if the search has Captials
set showcmd "show the command in progress on last line of screen
set hidden "keep unloaded buffers?
set guioptions=aegimt
set guifont=PragmataPro:h16
set incsearch "show search results as you type
set t_co=256
set showmatch "when bracket inserted, briefly jump to matching one if visible
set autochdir "auto change the folder when you change files
set mouse=a "mouse enabled just in case
set clipboard=unnamed "copy paste with the system clipboard
set ruler "line numbers etc
set lazyredraw "buffer screen updates
set list "display whitespace
set listchars=tab:┊\ ,precedes:<,extends:>,nbsp:␠ "indicate tabs...
"set listchars=tab:┊\ ,trail:·,precedes:<,extends:>,nbsp:␠ "Itai version
set completeopt=menu,menuone,longest
set backspace=indent,eol,start
augroup CommentStrings
    autocmd!
    autocmd FileType c,objc,cpp set commentstring=//\ %s "c comments
augroup END

"YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion=1
"let g:ycm_path_to_python_interpreter = '/Users/jack/.pyenv/shims/python'
"let g:ycm_path_to_python_interpreter = '/System/Library/Frameworks/Python.framework/Versions/Current/bin/python'
let g:ycm_path_to_python_interpreter = '/usr/local/bin/python' "ran install.py with homebrew python (pyenv system)
"let g:ycm_python_binary_path = '/usr/local/bin/python' "provide autocomplete specifically for python 3
"let g:ycm_python_binary_path = '/Users/jack/.pyenv/shims/python'
let g:ycm_python_binary_path = 'python' "resolves to pyenv
let g:EclimCompletionMethod = 'omnifunc' "java, feed eclim to YCM omnifunc

"Syntastic
let g:syntastic_javascript_checkers = ['jshint'] " use jshint
let g:syntastic_check_on_open = 1 " show any linting errors immediately
let g:syntastic_cpp_compiler_options = '-std=c++14'
"let g:syntastic_python_python_exec = '/usr/local/bin/python'
let g:syntastic_python_python_exec = '/Users/jack/.pyenv/shims/python'
let g:syntastic_python_checkers = ['python']
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker

let NERDTreeQuitOnOpen=1 "NerdTree
let NERDTreeIgnore = ['\.pyc$']
set rtp+=~/.vim/bundle/vim-airline/vim-airline/bindings/vim "airline

"Vundle
set rtp+=~/.vim/bundle/vundle/
"set rtp+=~/.vim/bundle/Vundle.vim
"MUST CHANGE ON SOME SITUATIONS^

call vundle#begin()
Plugin 'gmarik/vundle' "vundle
Plugin 'chriskempson/base16-vim' "color schemes
Plugin 'bling/vim-airline.git' "airline
Plugin 'lervag/vimtex'
Plugin 'tpope/vim-surround' "pair plugin, brackets etc
Plugin 'tpope/vim-commentary' "commenting
Plugin 'Syntastic' "syntax checking
Plugin 'scrooloose/nerdtree' "file browser
Plugin 'Valloric/YouCompleteMe' "autocomplete
Plugin 'pangloss/vim-javascript' "better js indentation/highlighting
Plugin 'ternjs/tern_for_vim' "js autocomplete, also needs an npm install
Plugin 'vim-ruby/vim-ruby' "better ruby support (esp autocomp)
Plugin 'toyamarinyon/vim-swift' "swift highlighting
Plugin 'Shougo/vimproc' "support for some autocomplete; requires 'make'
Plugin 'Shougo/unite.vim' "support for phpcomplete
"Plugin 'm2mdas/phpcomplete-extended' "php autocompletion
"Plugin 'StanAngeloff/php.vim' " better php..
Plugin 'shawncplus/phpcomplete.vim' "PHP
Plugin 'vim-scripts/applescript.vim' "applescript
Plugin 'embear/vim-localvimrc' "enable project specific .lvimrc (indeting, etc)
Plugin 'haya14busa/incsearch.vim' "better visual searching
Plugin 'majutsushi/tagbar' "tags for C++
Plugin 'rhysd/clever-f.vim' "better f and t behavior
Plugin 'tpope/vim-fugitive'
Plugin 'brgmnn/vim-opencl' "opencl syntax (.cl)
Plugin 'leafgarland/typescript-vim' "typescript highlighting & indentation
Plugin 'Quramy/tsuquyomi' "typescript semantic autocomplete w/ vimproc
call vundle#end() 
let g:calendar_google_calendar = 1

augroup Completion
    autocmd!
    autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP
augroup END


filetype plugin indent on 
filetype on
set autoread "if file changed outside of vim, just read it again
"set guifont=PragmataPro\ for\ Powerline:h16 "Font for Macvim
au FileType python set softtabstop=2 | set shiftwidth=2
"au FileType python set softtabstop=2 | colorscheme base16-ocean
au FileType ruby set tabstop=2 | set shiftwidth=2
au FileType javascript setl sw=2 sts=2 et
au FileType applescript set softtabstop=2 | set shiftwidth=2
au FileType html set softtabstop=2 | set shiftwidth=2

"Key controls
set whichwrap=<,>,[,],h,l "allow h and l to wrap cursor around to prev/next line
nmap q :q <enter> 
imap <Tab> <C-P>
map j gj
map k gk
command W w
command Q q
noremap <C-n> :NERDTreeToggle<CR>
command! Pylint call Pylint()

"emacs/osx style motion
inoremap <C-e> <Esc>A
inoremap <C-a> <Esc>I

"Incsearch
map /  <Plug>(incsearch-forward)
"map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

nmap ? :TagbarToggle<CR>

function! Pylint()
    if g:syntastic_python_checkers == ['pylint', 'python'] "disable pylint
        let g:syntastic_python_checkers = ['python']
    else
        let g:syntastic_python_checkers = ['pylint', 'python'] "enable pylint
    endif
    SyntasticCheck
endfunction


" easy escape
:imap jk <Esc>
